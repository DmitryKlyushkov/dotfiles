{
  "html": {
    "prefix": "html",
    "body": [
      "<!DOCTYPE html>",
      "<html>",
      "  <head>",
      "    <meta charset='utf-8'>",
      "    <title>Untitled</title>",
      "    <meta name='description' content='description'>",
      "    <link rel='stylesheet' type='text/css' href='theme.css'>",
      "  </head>",
      "  <body>",
      "  </body>",
      "</html>"
    ],
    "description": "Full HTML tag"
  },
  "table": {
    "prefix": "table",
    "body": [
      "<table>",
      " <thead>",
      "   <tr>",
      "     <th></th>",
      "   </tr>",
      " </thead>",
      " <tbody>",
      "   <tr>",
      "     <td></td>",
      "   </tr>",
      " </tbody>",
      "</table>"
    ],
    "description": "table, thead, tbody"
  },
  "React fragment": {
    "prefix": "<>",
    "body": ["<>", "  $1", "</>"],
    "description": "React fragment"
  },
  "NextJS Page": {
    "prefix": "pages",
    "body": [
      "export default function Page(){",
      "  return (",
      "    <>",
      "      <h1>page</h1>",
      "    </>",
      "  )",
      "}"
    ],
    "description": "NextJS Page"
  },
  "NextJS Dynamic Page": {
    "prefix": "paged",
    "body": [
      "export async function generateStaticParams() {",
      "  const posts = await fetch(\"https://jsonplaceholder.typicode.com/post\").then(",
      "    (res) => res.json(),",
      "  );",
      "",
      "  return posts.map((post) => ({",
      "    slug: post.id,",
      "  }));",
      "}",
      "",
      "export default async function Page({",
      "  params,",
      "}: {",
      "  params: Promise<{ slug: string }>;",
      "}) {",
      "  const slug = (await params).slug;",
      "  return (",
      "    <div>",
      "      <p>{slug}</p>",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "NextJS Dynamic Page"
  },
  "NextJS Layout": {
    "prefix": "layout",
    "body": [
      "export default function ${TM_FILENAME_BASE}({",
      "  children,",
      "}: {",
      "  children: React.ReactNode",
      "}) {",
      "  return (",
      "    <section>",
      "      <nav></nav>",
      "      {children}",
      "    </section>",
      "  )",
      "}"
    ],
    "description": "NextJS Layout Component"
  },
  "NextJS Template": {
    "prefix": "template",
    "body": [
      "export default function Template({ children }: { children: React.ReactNode }) {",
      "  return (",
      "    <div>{children}</div>",
      "  )",
      "}"
    ],
    "description": "NextJS Template"
  },
  "NextJS Metadata": {
    "prefix": "metadata",
    "body": [
      "import type { Metadata } from \"next\";",
      "",
      "export const metadata: Metadata = {",
      " title: \"Title\",",
      " description: \"Description\",",
      "};"
    ],
    "description": "NextJS Metadata (only server components)"
  },
  "NextJS Middleware": {
    "prefix": "middleware",
    "body": [
      "import { NextResponse, NextRequest } from 'next/server'",
      "",
      "// This function can be marked `async` if using `await` inside",
      "export function middleware(request: NextRequest) {",
      "  return NextResponse.redirect(new URL('/home', request.url))",
      "}",
      "",
      "// Optional",
      "export const config = {",
      "  matcher: [",
      "    {",
      "      source: '/api/*',",
      "      regexp: '^/api/(.*)',",
      "      locale: false,",
      "      has: [",
      "        { type: 'header', key: 'Authorization', value: 'Bearer Token' },",
      "        { type: 'query', key: 'userId', value: '123' },",
      "      ],",
      "      missing: [{ type: 'cookie', key: 'session', value: 'active' }],",
      "    },",
      "  ],",
      "}"
    ],
    "description": "NextJS Middleware"
  },
  "React Component": {
    "prefix": "component",
    "body": [
      "export default function ${TM_FILENAME_BASE}() {",
      "  return (",
      "    <>",
      "      <h1>${TM_FILENAME_BASE}</h1>",
      "    </>",
      "  );",
      "};"
    ],
    "description": "React Component"
  },
  "React Module Styles": {
    "prefix": "styles",
    "body": ["import styles from '${TM_FILENAME_BASE}.module.scss'"],
    "description": "React Module Styles"
  },
  "console log": {
    "prefix": "log",
    "body": ["console.log($1);"],
    "description": "console.log"
  },
  "ternary": {
    "prefix": "3",
    "body": "${1:cond} ? ${2:true} : ${3:false}",
    "description": "${1} ? ${2} : ${3}"
  },
  "function": {
    "prefix": "f",
    "body": ["function ${1:name}($2) {", "\t$0", "}"],
    "description": "function ${1}($2) {"
  },
  "function-arrow": {
    "prefix": "fw",
    "body": ["($1) => {", "\t$0", "}"],
    "description": "($1) => { $0 }"
  },
  "function-async": {
    "prefix": "fa",
    "body": ["async function ${1:name}($2) {", "\t$0", "}"],
    "description": "async function ${1}($2) {"
  },
  "function-async-arrow": {
    "prefix": "faw",
    "body": ["async ($1) => {", "\t$0", "}"],
    "description": "async ($1) => { $0 }"
  },
  "function-method": {
    "prefix": "fm",
    "body": ["${1:name}($2) {", "\t$0", "},"],
    "description": "${1}($2) { $0 },"
  },
  "function-method-async": {
    "prefix": "fma",
    "body": ["async ${1:name}($2) {", "\t$0", "},"],
    "description": "${1}($2) { $0 },"
  },
  "function-method-arrow": {
    "prefix": "fmw",
    "body": ["${1:name} = ($2) => {", "\t$0", "},"],
    "description": "${1:name} = ($2) => { $0 },"
  },
  "function-method-async-arrow": {
    "prefix": "fmaw",
    "body": ["${1:name} = async ($2) => {", "\t$0", "},"],
    "description": "${1:name} = async ($2) => { $0 },"
  },
  "for": {
    "prefix": "for",
    "body": [
      "for (let ${1:i} = 0; ${1:i} < ${2:array}.length; ${1:i}++) {",
      "\t$0",
      "}"
    ],
    "description": "for (let ${1} = 0; ${1} < ${2}.length; ${1}++) {"
  },
  "for-of": {
    "prefix": "forof",
    "body": ["for (const ${1:item} of ${2:array}) {", "\t$0", "}"],
    "description": "for (const ${1} of ${2}) { $0 }"
  },
  "for-key-value": {
    "prefix": "forkv",
    "body": [
      "for (const [key, value] of Object.entries(${1:object})) {",
      "\t$0",
      "}"
    ],
    "description": "for (const [key, value] of Object.entries(${1})) {"
  },
  "for-of-async": {
    "prefix": "forofa",
    "body": ["for await (const ${1:item} of ${2:object}) {", "\t$0", "}"],
    "description": "for await (const ${1} of ${2}) {"
  },
  "for-in": {
    "prefix": "forin",
    "body": ["for (const ${1:key} in ${2:object}) {", "\t$0", "}"],
    "description": "for (const ${1:key} in ${2:object}) {"
  },
  "if": {
    "prefix": "if",
    "body": ["if (${1:condition}) {", "\t$0", "}"],
    "description": "if (${1}) { $0 }"
  },
  "if-else": {
    "prefix": "ifel",
    "body": ["if (${1:condition}) {", "\t$2", "} else {", "\t$0", "}"],
    "description": "if (${1}) { $2 } else { $0 }"
  },
  "else": {
    "prefix": "el",
    "body": ["} else {", "\t$0", "}"],
    "description": "} else { $0 }"
  },
  "else-if": {
    "prefix": "elif",
    "body": ["} else if (${1:condition}) {", "\t$0", "}"],
    "description": "} else if (${1}) { $0 }"
  },
  "if-else-if": {
    "prefix": "ifelif",
    "body": [
      "if (${1:condition}) {",
      "\t$0",
      "} else if (${2:condition}) {",
      "\t$3",
      "}"
    ],
    "description": "if (${1}) { $0 } else if (${2}) { $3 }"
  },
  "json-stringify": {
    "prefix": "js",
    "body": "JSON.stringify(${0:object})",
    "description": "JSON.stringify($0)"
  },
  "json-parse": {
    "prefix": "jp",
    "body": "JSON.parse(${0:object})",
    "description": "JSON.parse($0)"
  },
  "object-keys": {
    "prefix": "ok",
    "body": "Object.keys(${0:object})",
    "description": "Object.keys(${0})"
  },
  "object-values": {
    "prefix": "ov",
    "body": "Object.values(${0:object})",
    "description": "Object.values(${0})"
  },
  "object-entries": {
    "prefix": "oe",
    "body": "Object.entries(${0:object})",
    "description": "Object.entries(${0})"
  },
  "return-promise": {
    "prefix": "rp",
    "body": "return new Promise((resolve, reject) => {\n\t${0}\n})"
  },
  "switch": {
    "prefix": "sw",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}: {",
      "\t\t$0",
      "\tbreak;",
      "}",
      "\tdefault: {",
      "\t\tbreak;",
      "\t}",
      "}"
    ],
    "description": "switch(${1}) {"
  },
  "switch-case": {
    "prefix": "swc",
    "body": ["case ${1:value}: {", "\t$0", "\tbreak;", "}"],
    "description": "case ${1} { $0 }"
  },
  "switch-default": {
    "prefix": "swd",
    "body": ["default: {", "\t$0", "\tbreak;", "}"],
    "description": "default { $0 }"
  },
  "set-timeout": {
    "prefix": "stm",
    "body": ["setTimeout(() => {", "\t$0", "}, ${1:timeout});"],
    "description": "setTimeout(() => { $0 }, ${1});"
  },
  "set-interval": {
    "prefix": "sit",
    "body": ["setInterval(() => {", "\t$0", "}, ${1:interval});"],
    "description": "setInterval(() => { $0 }, ${1});"
  },
  "try-catch": {
    "prefix": "try",
    "body": ["try {", "\t$0", "} catch (${1:error}) {", "", "}"],
    "description": "try { $0 } catch (error) { }"
  },
  "try-catch-finally": {
    "prefix": "tryc",
    "body": [
      "try {",
      "\t$0",
      "} catch (${1:error}) {",
      "\t$2",
      "} finally {",
      "\t$3",
      "}"
    ],
    "description": "try { $0 } catch (error) { $2 } finally { $3 }"
  },
  "while": {
    "prefix": "wh",
    "body": ["while (${1:condition}) {", "\t$0", "}"],
    "description": "while (${1:condition}) {"
  },
  "while-do": {
    "prefix": "whd",
    "body": ["do {", "\t$0", "} while (${1:condition});"],
    "description": "do { $0 } while (${1});"
  },
  "javascript_tips": {
    "prefix": "coords",
    "body": [
      "/*",
      "const coords = item.getBoundingClientRect() // Координаты/высота/ширина элемента",
      "coords.top       // Расстояние от верхнего края окна браузера до верхнего края элемента",
      "coords.bottom    // Расстояние от верхнего края окна браузера до нижнего края элемента",
      "coords.left      // Расстояние от левого края окна браузера до левого края элемента",
      "coords.right     // Расстояние от левого края окна браузера до правого края элемента",
      "coords.width     // Ширина элемента с border/scroll",
      "coords.height    // Высота элемента с border/scroll",
      "",
      "item.offsetWidth     // Ширина элемента с border/scroll",
      "item.offsetHeight    // Высота элемента с border/scroll",
      "item.clientWidth     // Ширина элемента без border/scroll",
      "item.clientHeight    // Высота элемента без  border/scroll",
      "",
      "window.scrollY / window.pageYOffset // Высота прокрученного контента",
      "window.scrollX / window.pageXOffset // Ширина прокрученного контента",
      "",
      "document.body.clientHeight   // Полная высота страницы",
      "document.body.clientWidth    // Полная ширина страницы(в зависимости от ширины окна браузера)",
      "",
      "// Анимация прокрутки окна, behavior = smooth/instant",
      "window.scrollTo({",
      "  top: 1000,",
      "  left: 0,",
      "  behavior: 'smooth',",
      "})",
      " */"
    ],
    "description": "javascript_tips"
  }
}
