{
  "html": {
    "prefix": "html",
    "body": [
      "<!DOCTYPE html>",
      "<html>",
      "  <head>",
      "    <meta charset='utf-8'>",
      "    <title>Untitled</title>",
      "    <meta name='description' content='description'>",
      "    <link rel='stylesheet' type='text/css' href='theme.css'>",
      "  </head>",
      "  <body>",
      "  </body>",
      "</html>"
    ],
    "description": "Full HTML tag"
  },
  "table": {
    "prefix": "table",
    "body": [
      "<table>",
      " <thead>",
      "   <tr>",
      "     <th></th>",
      "   </tr>",
      " </thead>",
      " <tbody>",
      "   <tr>",
      "     <td></td>",
      "   </tr>",
      " </tbody>",
      "</table>"
    ],
    "description": "table, thead, tbody"
  },
  "React fragment": {
    "prefix": "<>",
    "body": ["<>", "  $1", "</>"],
    "description": "React fragment"
  },
  "NextJS Page": {
    "prefix": "page",
    "body": [
      "export default function Page({",
      "  params,",
      "  searchParams,",
      "}: {",
      "  params: { slug: string }",
      "  searchParams: { [key: string]: string | string[] | undefined }",
      "}) {",
      "  return (",
      "    <>",
      "      <h1>My Page</h1>",
      "    </>",
      "  )",
      "}"
    ],
    "description": "NextJS Page"
  },
  "NextJS Layout": {
    "prefix": "layout",
    "body": [
      "import { ReactNode } from 'react';",
      "",
      "export default function Layout({",
      "  children,",
      "}: {",
      "  children: ReactNode",
      "}) {",
      "  return (",
      "    <>",
      "      <section>{children}</section>",
      "    </>",
      "  ) ",
      "}"
    ],
    "description": "NextJS Layout Component"
  },
  "NextJS Template": {
    "prefix": "template",
    "body": [
      "export default function Template({ children }: { children: React.ReactNode }) {",
      "  return (",
      "    <>",
      "      <div>{children}</div>",
      "    </>",
      "  )",
      "}"
    ],
    "description": "NextJS Template"
  },
  "NextJS Middleware": {
    "prefix": "middleware",
    "body": [
      "import { NextResponse, NextRequest } from 'next/server'",
      "",
      "// This function can be marked `async` if using `await` inside",
      "export function middleware(request: NextRequest) {",
      "  return NextResponse.redirect(new URL('/home', request.url))",
      "}",
      "",
      "// Optional",
      "export const config = {",
      "  matcher: [",
      "    {",
      "      source: '/api/*',",
      "      regexp: '^/api/(.*)',",
      "      locale: false,",
      "      has: [",
      "        { type: 'header', key: 'Authorization', value: 'Bearer Token' },",
      "        { type: 'query', key: 'userId', value: '123' },",
      "      ],",
      "      missing: [{ type: 'cookie', key: 'session', value: 'active' }],",
      "    },",
      "  ],",
      "}"
    ],
    "description": "NextJS Middleware"
  },
  "React Component": {
    "prefix": "component",
    "body": [
      "export default function ${TM_FILENAME_BASE}() {",
      "  return (",
      "    <>",
      "      <h1>${TM_FILENAME_BASE}</h1>",
      "    </>",
      "  );",
      "};"
    ],
    "description": "React Component"
  },
  "React Module Styles": {
    "prefix": "styles",
    "body": ["import styles from '${TM_FILENAME_BASE}.module.scss'"],
    "description": "React Module Styles"
  },
  "console log": {
    "prefix": "log",
    "body": ["console.log($1);"],
    "description": "console.log"
  },
  "for": {
    "prefix": "for",
    "body": ["for (let i=0; i<$1; i++) {}"],
    "description": "for"
  },
  "javascript_tips": {
    "prefix": "coords",
    "body": [
      "/*",
      "const coords = item.getBoundingClientRect() // Координаты/высота/ширина элемента",
      "coords.top       // Расстояние от верхнего края окна браузера до верхнего края элемента",
      "coords.bottom    // Расстояние от верхнего края окна браузера до нижнего края элемента",
      "coords.left      // Расстояние от левого края окна браузера до левого края элемента",
      "coords.right     // Расстояние от левого края окна браузера до правого края элемента",
      "coords.width     // Ширина элемента с border/scroll",
      "coords.height    // Высота элемента с border/scroll",
      "",
      "item.offsetWidth     // Ширина элемента с border/scroll",
      "item.offsetHeight    // Высота элемента с border/scroll",
      "item.clientWidth     // Ширина элемента без border/scroll",
      "item.clientHeight    // Высота элемента без  border/scroll",
      "",
      "window.scrollY / window.pageYOffset // Высота прокрученного контента",
      "window.scrollX / window.pageXOffset // Ширина прокрученного контента",
      "",
      "document.body.clientHeight   // Полная высота страницы",
      "document.body.clientWidth    // Полная ширина страницы(в зависимости от ширины окна браузера)",
      "",
      "// Анимация прокрутки окна, behavior = smooth/instant",
      "window.scrollTo({",
      "  top: 1000,",
      "  left: 0,",
      "  behavior: 'smooth',",
      "})",
      " */"
    ],
    "description": "javascript_tips"
  }
}
